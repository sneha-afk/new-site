name: Build and deploy to GH Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ['main']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets the GITHUB_TOKEN permissions to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: 'pages'
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10'
  BUILD_DIR: './dist'

jobs:
  # Separate build job for better organization
  build:
    name: Build application
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm

      # Cache node_modules separately for faster installs
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      # Cache build outputs for faster rebuilds
      - name: Cache build outputs
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.BUILD_DIR }}
            .vite
            node_modules/.vite
          key: ${{ runner.os }}-build-${{ hashFiles('src/**/*', 'public/**/*', 'package.json', 'vite.config.*', 'tsconfig.json') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Install dependencies
        run: pnpm install

      # Skip build if cached and no source changes
      - name: Check if build needed
        id: build-check
        run: |
          if [[ -d "${{ env.BUILD_DIR }}" && -n "$(ls -A ${{ env.BUILD_DIR }})" ]]; then
            echo "build-needed=false" >> $GITHUB_OUTPUT
          else
            echo "build-needed=true" >> $GITHUB_OUTPUT
          fi

      - name: Build application
        if: steps.build-check.outputs.build-needed == 'true'
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: ${{ env.BUILD_DIR }}
          retention-days: 1
          compression-level: 9

  deploy:
    name: Deploy to GitHub Pages
    needs: build
    runs-on: ubuntu-latest

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: ${{ env.BUILD_DIR }}

      - name: Configure GitHub Pages
        uses: actions/configure-pages@v5

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v4
        with:
          path: ${{ env.BUILD_DIR }}

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
